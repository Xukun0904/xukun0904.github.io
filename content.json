[{"title":"CentOS7下MariaDB、JDK及Redis安装与配置","date":"2020-07-27T14:59:46.000Z","path":"2020/07/27/CentOS7下MariaDB、JDK及Redis安装与配置/","text":"MariaDB安装与配置简介 MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。 安装准备 查看系统版本 12[root@xukun94 ~]# cat &#x2F;etc&#x2F;redhat-releaseCentOS Linux release 7.7.1908 (Core) 查看是否已经安装 1234[root@xukun94 ~]# rpm -qa | grep mariadbmariadb-libs-5.5.65-1.el7.x86_64mariadb-server-5.5.65-1.el7.x86_64mariadb-5.5.65-1.el7.x86_64 以上代表安装过，可卸载重装，卸载命令 1[root@xukun94 ~]# yum remove mariadb-server 开始安装通过yum安装即可，yum命令如下 1[root@xukun94 ~]# yum install mariadb-server 启动服务 1[root@xukun94 ~]# systemctl start mariadb 若需要开机自动启动，执行以下命令即可 1[root@xukun94 ~]# systemctl enable mariadb 配置首次配置 进行初始化配置 1[root@xukun94 ~]# mysql_secure_installation 配置过程如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY!In order to log into MariaDB to secure it, we&#39;ll need the currentpassword for the root user. If you&#39;ve just installed MariaDB, andyou haven&#39;t set the root password yet, the password will be blank,so you should just press enter here.# 输入数据库管理员密码，若第一次进入则直接回车Enter current password for root (enter for none): OK, successfully used password, moving on...Setting the root password ensures that nobody can log into the MariaDBroot user without the proper authorisation.# 设置密码Set root password? [Y&#x2F;n] y# 密码New password: # 确认密码Re-enter new password: Password updated successfully!Reloading privilege tables.. ... Success!By default, a MariaDB installation has an anonymous user, allowing anyoneto log into MariaDB without having to have a user account created forthem. This is intended only for testing, and to make the installationgo a bit smoother. You should remove them before moving into aproduction environment.# 是否移除匿名用户Remove anonymous users? [Y&#x2F;n] y ... Success!Normally, root should only be allowed to connect from &#39;localhost&#39;. Thisensures that someone cannot guess at the root password from the network.# 是否拒绝远程登录Disallow root login remotely? [Y&#x2F;n] n ... skipping.By default, MariaDB comes with a database named &#39;test&#39; that anyone canaccess. This is also intended only for testing, and should be removedbefore moving into a production environment.# 是否移除test测试数据库Remove test database and access to it? [Y&#x2F;n] y - Dropping test database... ... Success! - Removing privileges on test database... ... Success!Reloading the privilege tables will ensure that all changes made so farwill take effect immediately.# 是否重新加载权限库Reload privilege tables now? [Y&#x2F;n] y ... Success!Cleaning up...All done! If you&#39;ve completed all of the above steps, your MariaDBinstallation should now be secure.Thanks for using MariaDB! 测试是否能登录成功 1234567891011[root@xukun94 ~]# mysql -u root -pEnter password: Welcome to the MariaDB monitor. Commands end with ; or \\g.Your MariaDB connection id is 10Server version: 5.5.65-MariaDB MariaDB ServerCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type &#39;help;&#39; or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.MariaDB [(none)]&gt; 配置字符集为UTF-8 编辑/etc/my.cnf 文件 1[root@xukun94 ~]# vi &#x2F;etc&#x2F;my.cnf [mysqld]标签下添加如下代码 12345init_connect&#x3D;&#39;SET collation_connection &#x3D; utf8_unicode_ci&#39;init_connect&#x3D;&#39;SET NAMES utf8&#39;character-set-server&#x3D;utf8collation-server&#x3D;utf8_unicode_ciskip-character-set-client-handshake 编辑/etc/my.cnf.d/client.cnf 文件，在[client]标签下添加 1default-character-set&#x3D;utf8 编辑/etc/my.cnf.d/mysql-clients.cnf文件，在[mysql]标签下添加 1default-character-set&#x3D;utf8 重启服务后生效 1[root@xukun94 ~]# systemctl restart mariadb 登录MariaDB，查看编码是否生效 123456789101112131415161718192021222324MariaDB [(none)]&gt; show variables like &quot;%character%&quot;;+--------------------------+----------------------------+| Variable_name | Value |+--------------------------+----------------------------+| character_set_client | utf8 || character_set_connection | utf8 || character_set_database | utf8 || character_set_filesystem | binary || character_set_results | utf8 || character_set_server | utf8 || character_set_system | utf8 || character_sets_dir | &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;charsets&#x2F; |+--------------------------+----------------------------+8 rows in set (0.00 sec)MariaDB [(none)]&gt; show variables like &quot;%collation%&quot;;+----------------------+-----------------+| Variable_name | Value |+----------------------+-----------------+| collation_connection | utf8_unicode_ci || collation_database | utf8_unicode_ci || collation_server | utf8_unicode_ci |+----------------------+-----------------+3 rows in set (0.00 sec) 修改防火墙，开启端口 123456789101112# 查看防火墙3306端口是否开启[root@xukun94 ~]# firewall-cmd --query-port&#x3D;3306&#x2F;tcpno# 开启防火墙3306端口[root@xukun94 ~]# firewall-cmd --zone&#x3D;public --add-port&#x3D;3306&#x2F;tcp --permanentsuccess# 重启防火墙[root@xukun94 ~]# firewall-cmd --reloadsuccess# 查看防火墙3306端口是否开启[root@xukun94 ~]# firewall-cmd --query-port&#x3D;3306&#x2F;tcpyes 设置MariaDB可远程连接 查看mysql库中user表 12345678910111213141516MariaDB [(none)]&gt; use mysqlReading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedMariaDB [mysql]&gt; select host, user from user -&gt; ;+-----------+------+| host | user |+-----------+------+| 127.0.0.1 | root || ::1 | root || localhost | root || xukun94 | root |+-----------+------+4 rows in set (0.00 sec) 修改host为主机名的user为’%’ 123MariaDB [mysql]&gt; update user set host&#x3D;&#39;%&#39; where host&#x3D;&#39;xukun94&#39;;Query OK, 1 row affected (0.00 sec)Rows matched: 1 Changed: 1 Warnings: 0 刷新权限表 12MariaDB [mysql]&gt; flush privileges;Query OK, 0 rows affected (0.00 sec) 远程连接配置完成，使用连接工具连接即可 JDK1.8安装与配置安装准备 查看系统位数 I386–I686 都是32位 x86_64 是 64位 12[root@xukun94 ~]# uname -aLinux xukun94 3.10.0-229.1.2.el7.x86_64 #1 SMP Fri Mar 27 03:04:26 UTC 2015 x86_64 x86_64 x86_64 GNU&#x2F;Linux 进入Oracle官网下载JDK1.8，选择对应系统位数的rpm下载 使用xftp6等传输工具将下载好的文件上传到远程服务器中 开始安装使用rpm命令安装 1[root@xukun94 ~]# rpm -ivh jdk-8u261-linux-x64.rpm 配置添加环境变量，编辑source /etc/profile文件 1[root@xukun94 ~]# vi &#x2F;etc&#x2F;profile 在此文件最后添加如下代码 12export CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;rt.jar:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jarexport PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH 生效环境变量 1[root@xukun94 ~]# source &#x2F;etc&#x2F;profile 查看jdk是否安装成功 1234[root@xukun94 ~]# java -versionjava version &quot;1.8.0_261&quot;Java(TM) SE Runtime Environment (build 1.8.0_261-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.261-b12, mixed mode) Redis安装与配置安装准备 使用wget命令下载Redis5.0.9 1[root@xukun94 ~]# wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.9.tar.gzwget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.9.tar.gz 解压 1[root@xukun94 ~]# tar xzf redis-5.0.9.tar.gz 开始安装 进入解压后文件夹，执行make编译命令 12[root@xukun94 ~]# cd redis-5.0.9[root@xukun94 redis-5.0.9]# make 若遇到一下错误，说明gcc未安装，使用yum命令安装即可 123456789101112131415MAKE hirediscd hiredis &amp;&amp; make staticmake[3]: Entering directory &#96;&#x2F;root&#x2F;redis-5.0.9&#x2F;deps&#x2F;hiredis&#39;gcc -std&#x3D;c99 -pedantic -c -O3 -fPIC -Wall -W -Wstrict-prototypes -Wwrite-strings -g -ggdb net.cmake[3]: gcc: Command not foundmake[3]: *** [net.o] Error 127make[3]: Leaving directory &#96;&#x2F;root&#x2F;redis-5.0.9&#x2F;deps&#x2F;hiredis&#39;make[2]: *** [hiredis] Error 2make[2]: Leaving directory &#96;&#x2F;root&#x2F;redis-5.0.9&#x2F;deps&#39;make[1]: [persist-settings] Error 2 (ignored) CC adlist.o&#x2F;bin&#x2F;sh: cc: command not foundmake[1]: *** [adlist.o] Error 127make[1]: Leaving directory &#96;&#x2F;root&#x2F;redis-5.0.9&#x2F;src&#39;make: *** [all] Error 2 yum安装gcc 1[root@xukun94 redis-5.0.9]# yum install gcc 再次运行make编译命令，可能遇到以下错误 1234567891011121314cd src &amp;&amp; make allmake[1]: Entering directory &#96;&#x2F;root&#x2F;redis-5.0.9&#x2F;src&#39; CC Makefile.depmake[1]: Leaving directory &#96;&#x2F;root&#x2F;redis-5.0.9&#x2F;src&#39;make[1]: Entering directory &#96;&#x2F;root&#x2F;redis-5.0.9&#x2F;src&#39; CC adlist.oIn file included from adlist.c:34:0:zmalloc.h:50:31: fatal error: jemalloc&#x2F;jemalloc.h: No such file or directory #include &lt;jemalloc&#x2F;jemalloc.h&gt; ^compilation terminated.make[1]: *** [adlist.o] Error 1make[1]: Leaving directory &#96;&#x2F;root&#x2F;redis-5.0.9&#x2F;src&#39;make: *** [all] Error 2 执行以下代码进行编译 1[root@xukun94 redis-5.0.9]# make MALLOC&#x3D;libc 没有错误后，安装命令 1[root@xukun94 redis-5.0.9]# make install 配置 编辑redis.conf文件 1[root@xukun94 redis-5.0.9]# vi redis.conf 修改以下配置 1234# redis后台运行daemonize yes# 添加ipbind 127.0.0.1 192.168.136.128 允许远程访问redis 123456789101112# 查看防火墙6379端口是否开启[root@xukun94 redis-5.0.9]# firewall-cmd --query-port&#x3D;6379&#x2F;tcpno# 开启防火墙6379端口[root@xukun94 redis-5.0.9]# firewall-cmd --zone&#x3D;public --add-port&#x3D;6379&#x2F;tcp --permanentsuccess# 重启防火墙[root@xukun94 redis-5.0.9]# firewall-cmd --reloadsuccess# 再次查看防火墙6379端口是否开启[root@xukun94 redis-5.0.9]# firewall-cmd --query-port&#x3D;6379&#x2F;tcpyes 启动redis 1[root@xukun94 redis-5.0.9]# redis-server redis.conf 登录redis，验证是否安装成功 12[root@xukun94 redis-5.0.9]# redis-cli127.0.0.1:6379&gt; exit 关闭服务器 1[root@xukun94 redis-5.0.9]# redis-cli shutdown","tags":[{"name":"MariaDB","slug":"MariaDB","permalink":"http://xukun.fun/tags/MariaDB/"},{"name":"JDK","slug":"JDK","permalink":"http://xukun.fun/tags/JDK/"},{"name":"Redis","slug":"Redis","permalink":"http://xukun.fun/tags/Redis/"}]},{"title":"Shiro修改角色权限清除缓存问题","date":"2020-07-17T05:25:40.000Z","path":"2020/07/17/Shiro修改角色权限清除缓存问题/","text":"问题描述​ 使用Shiro中shiro:hasPermission标签，修改角色权限后相同角色下各个用户权限不一致问题。在角色管理中修改当前登陆人的角色权限，当前用户的权限更新了，但是这个角色下其它用户的权限还是修改前的权限。 问题原因​ shiro:hasPermission进行比较权限时，先通过CacheManager获取了Redis中的当前用户的权限缓存。 ​ 而更新角色权限后，调用Realm中的内置的clearCache方法清除权限缓存，只清除了当前用户的权限缓存。 解决方案​ 需要清除该角色下所有用户的权限缓存，通过RedisSessionDAO获取所有用户信息，然后循环清除用户权限缓存。若需要清除指定用户权限缓存，可将SimplePrincipalCollection对象强转成用户对象，再根据传入用户主键集合判断是否需要清除权限缓存。","tags":[{"name":"Shiro","slug":"Shiro","permalink":"http://xukun.fun/tags/Shiro/"}]},{"title":"Mybatis-Plus分页多次查询获取相同数据问题","date":"2020-03-17T05:53:33.000Z","path":"2020/03/17/Mybatis-Plus分页多次查询获取相同数据问题/","text":"问题描述​ 使用MyBatis-Plus 3.1.0，在做一个千万级数据从MySQL导入ElasticSearch的测试脚本中，由于数据量过大，不能一次获取，所以需要分页，循环递增页码来获取数据中发现每次分页查询结果都一样。 问题原因​ MyBatis 判断是否需要使用一级缓存的代码早于 MyBatis-Plus 分页插件拦截的代码执行，导致获取的结果一直都是一级缓存中的数据。 解决方案​ 在对应XML的SELECT标签中，加入flushCache=”true”属性，调用此查询方法会自动清除一级缓存和二级缓存。","tags":[{"name":"MyBatis-Plus","slug":"MyBatis-Plus","permalink":"http://xukun.fun/tags/MyBatis-Plus/"}]}]